import org.apache.http.client.utils.URLEncodedUtils
import org.apache.http.message.BasicNameValuePair

import groovyx.net.http.HttpBuilder

import java.nio.charset.Charset

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.patdouble:zap-gradle-plugin:2.+'
        classpath 'org.apache.httpcomponents:httpclient:4.5.12'
        classpath 'io.github.http-builder-ng:http-builder-ng-core:1.0.4'
    }
}

plugins {
    id "com.avast.gradle.docker-compose" version "0.12.1"
    id 'com.github.ben-manes.versions' version '0.28.0'
}

apply plugin: 'com.patdouble.zap'

zapConfig {
    // Let docker-compose pick a random port number to avoid conflicts
    applicationUrl = project.objects.property(String).convention('').map {
        def host = dockerCompose.servicesInfos.dvwa.firstContainer.host
        def port = dockerCompose.servicesInfos.dvwa.firstContainer.ports[80]
        "http://${host}:${port}"
    }
    activeScanTimeout = "0"
    version = 'w2021-03-01'
}

def userTokenFromHtml(html) {
    if (html instanceof byte[]) {
        html = new String(html, 'UTF-8')
    }
    def m = (~/<input\s+type=['"]hidden['"]\s+name=['"]user_token['"]\s+value=['"](.+?)['"]/).matcher(html as String)
    m.find() ? m.group(1) : ''
}

task dvwaSetup {
    doLast {
        def dvwa = HttpBuilder.configure {
            request.uri = zapConfig.applicationUrl.get()
        }
        def loginForm = dvwa.get {
            request.uri.path = '/login.php'
        }
        dvwa.post {
            request.uri.path = '/login.php'
            request.contentType = 'application/x-www-form-urlencoded'
            request.body = [username: 'admin',
                            password: 'password',
                            Login: 'Login',
                            user_token: userTokenFromHtml(loginForm)]
        }

        def setupForm = dvwa.get {
            request.uri.path = '/setup.php'
        }
        dvwa.post {
            request.uri.path = '/setup.php'
            request.contentType = 'application/x-www-form-urlencoded'
            request.body = [create_db: 'Create / Reset Database',
                            user_token: userTokenFromHtml(setupForm)]
        }

        def securityForm = dvwa.get {
            request.uri.path = '/security.php'
        }
        dvwa.post {
            request.uri.path = '/security.php'
            request.contentType = 'application/x-www-form-urlencoded'
            request.body = [security: 'low',
                            seclev_submit: 'Submit',
                            user_token: userTokenFromHtml(securityForm)]
        }
    }
}
dockerCompose.isRequiredBy(dvwaSetup)

task zapSetup(dependsOn: [zapStart, dvwaSetup]) {
    doLast {
        zapConfig.api {
            // based on https://github.com/zaproxy/zaproxy/issues/2093
            project.ext.contextId = context.newContext(project.name).value
            context.includeInContext(project.name, "\\Q${zapConfig.applicationUrl.get()}\\E.*")
            context.excludeFromContext(project.name, "\\Q${zapConfig.applicationUrl.get()}/login.php\\E")
            context.excludeFromContext(project.name, "\\Q${zapConfig.applicationUrl.get()}/logout.php\\E")
            context.excludeFromContext(project.name, "\\Q${zapConfig.applicationUrl.get()}/setup.php\\E")
            context.excludeFromContext(project.name, "\\Q${zapConfig.applicationUrl.get()}/security.php\\E")
            context.excludeFromContext(project.name, "\\Q${zapConfig.applicationUrl.get()}/vulnerabilities/csrf\\E.*")
            logger.info "Context ID = ${project.ext.contextId}"

            if (!(delegate.script.listScripts().items.find { it.getStringValue('name') == 'dvwa-auth' })) {
                delegate.script.load('dvwa-auth', 'authentication', 'Oracle Nashorn', project.file('src/main/resources/auth.js').absolutePath, 'dvwa auth', (Charset) null)
            }

            String scriptBasedAuthParams = URLEncodedUtils.format([
                    new BasicNameValuePair('scriptName', 'dvwa-auth'),
                    new BasicNameValuePair('Login URL', "${zapConfig.applicationUrl.get()}/login.php"),
                    new BasicNameValuePair('CSRF Field', 'user_token'),
                    new BasicNameValuePair('POST Data', 'username={%username%}&password={%password%}&Login=Login&user_token={%user_token%}')
            ], "UTF-8")

            logger.info "scriptBaseAuthParams = ${scriptBasedAuthParams}"
            authentication.setAuthenticationMethod(project.ext.contextId, 'scriptBasedAuthentication', scriptBasedAuthParams)
            authentication.setLoggedInIndicator(project.ext.contextId, '\\Q<a href="logout.php">Logout</a>\\E')
            authentication.setLoggedOutIndicator(project.ext.contextId, '(?:Location: [./]*login\\.php)|(?:\\Q<form action="login.php" method="post">\\E)')

            project.ext.adminId = users.newUser(project.ext.contextId, 'Administrator').value
            logger.info "Admin ID = ${project.ext.adminId}"
            users.setAuthenticationCredentials(project.ext.contextId, project.ext.adminId, "Username=admin&Password=password")
            users.setUserEnabled(project.ext.contextId, project.ext.adminId, "true")

            forcedUser.setForcedUser(project.ext.contextId, project.ext.adminId)
            forcedUser.setForcedUserModeEnabled(true)

            spider.setOptionAcceptCookies(true)
        }
    }
}
zapSpider.dependsOn zapSetup
zapAjaxSpider.dependsOn zapSetup
zapActiveScan.dependsOn zapSetup
zapStop.mustRunAfter zapSetup

dockerCompose.isRequiredBy(zapSetup)
dockerCompose.isRequiredBy(zapSpider)
dockerCompose.isRequiredBy(zapAjaxSpider)
dockerCompose.isRequiredBy(zapActiveScan)

task check(dependsOn: [zapSpider, zapAjaxSpider, zapActiveScan, zapReport]) {
    group = 'verification'
}
