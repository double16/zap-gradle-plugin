import org.apache.http.client.utils.URLEncodedUtils
import org.apache.http.message.BasicNameValuePair

import groovyx.net.http.HttpBuilder

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.patdouble:zap-gradle-plugin:2.+'
        classpath 'org.apache.httpcomponents:httpclient:4.5.3'
        classpath 'io.github.http-builder-ng:http-builder-ng-core:1.0.3'
    }
}

plugins {
    id "com.avast.gradle.docker-compose" version "0.8.12"
    id 'com.github.ben-manes.versions' version '0.21.0'
}

apply plugin: 'com.patdouble.zap'

zapConfig {
    applicationUrl = 'http://localhost:8080/WebGoat/start.mvc#lesson/WebGoatIntroduction.lesson'
    activeScanTimeout = "0"
}

task webgoatSetup {
    doLast {
        def goat = HttpBuilder.configure {
            request.uri = 'http://localhost:8080/WebGoat/'
        }
        goat.post {
            request.uri.path = '/WebGoat/register.mvc'
            request.contentType = 'application/x-www-form-urlencoded'
            request.body = [username: 'username1',
                            password: 'Passw0rd',
                            matchingPassword: 'Passw0rd',
                            agree: 'agree']
        }
    }
}

task zapSetup(dependsOn: [zapStart, webgoatSetup]) {
    doLast {
        zapConfig.api {
            project.ext.contextId = context.newContext(project.name).value
            context.includeInContext(project.name, "\\Qhttp://localhost:8080/WebGoat/\\E.*")
            logger.info "Context ID = ${project.ext.contextId}"

            String formBaseAuthParams = URLEncodedUtils.format([new BasicNameValuePair('loginUrl', 'http://localhost:8080/WebGoat/login'), new BasicNameValuePair('loginRequestData', 'username={%username%}&password={%password%}')], "UTF-8")

            logger.info "formBaseAuthParams = ${formBaseAuthParams}"
            authentication.setAuthenticationMethod(project.ext.contextId, 'formBasedAuthentication', formBaseAuthParams)
            authentication.setLoggedOutIndicator(project.ext.contextId, '(?:Location: .*/login)|(?:\\QLogin Page\\E)')

            project.ext.adminId = users.newUser(project.ext.contextId, 'User').value
            logger.info "Admin ID = ${project.ext.adminId}"
            users.setAuthenticationCredentials(project.ext.contextId, project.ext.adminId, "username=username1&password=Passw0rd")
            users.setUserEnabled(project.ext.contextId, project.ext.adminId, "true")

            forcedUser.setForcedUser(project.ext.contextId, project.ext.adminId)
            forcedUser.setForcedUserModeEnabled(true)

            spider.setOptionAcceptCookies(true)
        }
    }
}
zapSpider.dependsOn zapSetup
zapAjaxSpider.dependsOn zapSetup
zapActiveScan.dependsOn zapSetup
zapStop.mustRunAfter zapSetup

dockerCompose.isRequiredBy(zapSetup)
dockerCompose.isRequiredBy(zapSpider)
dockerCompose.isRequiredBy(zapAjaxSpider)
dockerCompose.isRequiredBy(zapActiveScan)

task check(dependsOn: [zapSpider, zapAjaxSpider, zapActiveScan, zapReport]) {
    group = 'verification'
}
